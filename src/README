These directories and files implement the new version of F* ("universes"):
- syntax/ including parser/tosyntax.fs and parser/env.fs
- typechecker/
- smtencoding/
- extraction/{term,modul}

These directories and files implement the old stratified version of F*, which is
behind the flag --stratified and should generally no longer be updated as
stratified F* is being phased out:
- absyn/ including parser/desugar.fs and parser/dsenv.fs
- tc/
- tosmt/
- extraction/extract{mod,typ,exp}

Because of the dual reading of F*'s sources as either an F# program or an F*
program, here's the list of files you need to modify if you want to (properly)
implement a new function for the [List] module.
- basic/list.fsi (interface file for F*-as-an-F#-project)
- basic/list.fs (implementation file for F*-as-an-F#-project)
- ../lib/list.fsti (interface file for F*-as-an-F*-project)
- ../lib/ml/FStar_List.ml (implementation file for F*-as-an-F*-project)
- ../lib/FStar.List.fst (because if someone starts verifying against list.fsti,
  later on switches to the .fst and realizes that the function doesn't exist,
  they're going to be unhappy)
- ../ulib/list.fsti (be a good F* citizen)
- ../ulib/ml/FStar_List.ml (same)
- ../ulib/FStar.List.fst (same)

Another example, this time from the [Pprint] library. This is a different 
situation from [List] above, in that the F* file is just declaring types 
and function, we don't want to prove anything about the F* code, and the 
main implementations are the OCaml and F# ones: 
- prettyprint/prettyprint.fsti (F* interface file declaring types and functions);
- prettyprint/prettyprint.{fs,fsi} (F# implementation of the fsti interface);
- prettyprint/ml/FStar.Pprint.ml (OCaml implementation, has same module name as F* one)
To build this:
- Add the fsti file to src/Makefile's ALL_INTERFACES;
- Build the {fs,fsi} files as part of the VS solution;
- Add FStar_Pprint.cmx to src/ocaml-output/Makefile's FSTAR_OBJS. 

